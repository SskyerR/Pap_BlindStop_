//programa: BlindStop Test Version 1.65_β\
//Autor: Tiago G. e José M.\

/* Int botão */

int set = A0;
int rfid = A3;
int conf = A2;
int reset = A1;
int led1 = 8;
int led2 = 7;


/* Int Componentes */
#include <LiquidCrystal.h>
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


/* Int Valore Logicos */
int contador = 0;
int lock = 0;
int estado_anterior=0;
int estado_anterior0=0;
int estado_anterior1=0;
int estado_anterior2=0;
int estado_actual=0;
int estado_actual0=0;
int estado_actual1=0;
int estado_actual2=0;

/* Booleans & Longs add / lock button*/
boolean led1State = false;
boolean led2State = false;

long setTimer = 0;
long longPressTime = 750;

boolean setActive = false;
boolean longPressActive = false;
/* Booleans & Longs reset / Shutdown*/

long resetTimer = 0;
long longPressTime0 = 750;

boolean resetActive = false;
boolean longPressActive0 = false;

/* Piezzo / Buzzer Ints*/
#define C 1912
int speakerOut=9;
int tone_ = 0;
int beat = 0;
int melody[] = {C,C};
int beats[] = {16,16};
int MAX_COUNT = sizeof(melody) / 2;
int pause = 1000;
int rest_count = 100;
int DEBUG = 1;
long tempo = 10000;
long duration = 0;

/* bluetooth Commands */
char data = 0;

void setup(){

pinMode (set, INPUT);
pinMode (rfid,INPUT);
pinMode (conf, INPUT);
pinMode (reset, INPUT);
pinMode (led1,OUTPUT);
pinMode (led2, OUTPUT);
lcd.begin(8, 2);
Serial.begin(9600);
pinMode(speakerOut, OUTPUT);
if (DEBUG) {
Serial.begin(9600);
}
}
void loop(){

lcd.setCursor(0, 0);
lcd.print("BUS STOP");

lcd.setCursor(0, 1);
lcd.print(contador);

lcd.setCursor(15, 1);
lcd.print(lock);


estado_actual=digitalRead(set);
estado_actual0=digitalRead(rfid);
estado_actual1= digitalRead (reset);
estado_actual2=digitalRead(conf);

for (int i=0; i<MAX_COUNT; i++) {
tone_ = melody[i];
beat = beats[i];

duration = beat * tempo;



delayMicroseconds(pause);

if (DEBUG) { Serial.print(i);
Serial.print(":");
Serial.print(beat);
Serial.print(" ");
Serial.print(tone_);
Serial.print(" ");
Serial.println(duration);
}

if(Serial.available() > 0)
{
data = Serial.read();
Serial.print(data);
Serial.print("n");
if(data == '1')
if (contador > 0 ){
contador=contador-1;
lcd.setCursor(0, 1);
lcd.print(" ");
}
else if(data == '0')
if (contador > 0 ){
contador=contador-1;
lcd.setCursor(0, 1);
lcd.print(" ");
}
}




if (contador==0){
lock=0;
}
if (lock==1){
lcd.setCursor(4, 1);
lcd.print("lock");
}else{
lcd.setCursor(4, 1);
lcd.print(" ");
}






if (digitalRead(set) == HIGH) {

if (setActive == false) {

setActive = true;
setTimer = millis();

}

if ((millis() - setTimer > longPressTime) && (longPressActive == false)) {

longPressActive = true;
led1State = !led1State;
digitalWrite(led1, led1State);
ativaToque();

if(lock==1){
lock=0;
}else{
lock=1;
}
}

} else {

if (setActive == true) {

if (longPressActive == true) {

longPressActive = false;


/*if(lock==1){
lock=0;
}else{
lock=1;
}*/



} else {

led2State = !led2State;
digitalWrite(led2, led2State);
if(lock == 0 ){
contador=contador+1;
}
}

setActive = false;

}
}

/* butão reset / shutdown*/
if (digitalRead(reset) == HIGH) {

if (resetActive == false) {

resetActive = true;
resetTimer = millis();

}

if ((millis() - resetTimer > longPressTime0) && (longPressActive0 == false)) {

longPressActive0 = true;
led1State = !led1State;
digitalWrite(led1, led1State);

}

} else {

if (resetActive == true) {

if (longPressActive0 == true) {

longPressActive0 = false;

//longpress


} else {

led2State = !led2State;
digitalWrite(led2, led2State);
lcd.setCursor(0, 2);
lcd.print(" ");
if (contador > 0 ){
contador= 0;
lock= 0;

}
}

resetActive = false;

}
}

}
}



void ativaToque() {

long elapsed_time = 0;
if (tone_ > 0) {

while (elapsed_time < duration) {

digitalWrite(speakerOut,HIGH);
delayMicroseconds(tone_ / 2);


digitalWrite(speakerOut, LOW);
delayMicroseconds(tone_ / 2);


elapsed_time += (tone_);
}
}
else {
for (int j = 0; j < rest_count; j++) {
delayMicroseconds(duration);
}
}
} 
